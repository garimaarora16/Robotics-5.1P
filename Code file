#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped
from duckietown_msgs.msg import FSMState

class DriveSquare:
    def _init_(self):
        self.cmd_msg = Twist2DStamped()
        rospy.init_node('drive_square_node', anonymous=True)
        self.pub = rospy.Publisher('/akandb/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/akandb/fsm_node/mode', FSMState, self.fsm_callback, queue_size=1)

    def fsm_callback(self, msg):
        if msg.state == "NORMAL_JOYSTICK_CONTROL":
            self.stop_robot()
        elif msg.state == "LANE_FOLLOWING":
            rospy.sleep(1)
            self.move_robot()

    def stop_robot(self):
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = 0.0
        self.cmd_msg.omega = 0.0
        self.pub.publish(self.cmd_msg)

    def move_robot(self):
        self.move_straight(0.5, 1)
        self.move_turn(-0.5, 0.0, 1)
        self.move_straight(0.5, 1)
        self.move_turn(-0.5, 0.0, 1)
        self.move_straight(0.5, 1)
        self.move_turn(-0.5, 0.0, 1)
        self.move_straight(0.5, 1)
        self.stop_robot()

    def move_straight(self, velocity, duration):
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = velocity
        self.cmd_msg.omega = 0.0
        self.pub.publish(self.cmd_msg)
        rospy.sleep(duration)

    def move_turn(self, velocity, omega, duration):
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = velocity
        self.cmd_msg.omega = omega
        self.pub.publish(self.cmd_msg)
        rospy.sleep(duration)

    def run(self):
        rospy.spin()

if _name_ == '_main_':
    try:
        duckiebot_movement = DriveSquare()
        duckiebot_movement.run()
    except rospy.ROSInterruptException:
        pass
